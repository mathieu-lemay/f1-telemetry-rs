use crate::packet::generic::{
    Flag, Nationality, ResultStatus, Team, TyreCompound, TyreCompoundVisual,
};
use crate::packet::UnpackError;

pub(crate) fn unpack_flag(value: i8) -> Result<Flag, UnpackError> {
    match value {
        0 => Ok(Flag::None),
        1 => Ok(Flag::Green),
        2 => Ok(Flag::Blue),
        3 => Ok(Flag::Yellow),
        -1 => Ok(Flag::Invalid),
        _ => Err(UnpackError(format!("Invalid Flag value: {}", value))),
    }
}

pub(crate) fn unpack_nationality(value: u8) -> Result<Nationality, UnpackError> {
    match value {
        1 => Ok(Nationality::American),
        2 => Ok(Nationality::Argentinean),
        3 => Ok(Nationality::Australian),
        4 => Ok(Nationality::Austrian),
        5 => Ok(Nationality::Azerbaijani),
        6 => Ok(Nationality::Bahraini),
        7 => Ok(Nationality::Belgian),
        8 => Ok(Nationality::Bolivian),
        9 => Ok(Nationality::Brazilian),
        10 => Ok(Nationality::British),
        11 => Ok(Nationality::Bulgarian),
        12 => Ok(Nationality::Cameroonian),
        13 => Ok(Nationality::Canadian),
        14 => Ok(Nationality::Chilean),
        15 => Ok(Nationality::Chinese),
        16 => Ok(Nationality::Colombian),
        17 => Ok(Nationality::CostaRican),
        18 => Ok(Nationality::Croatian),
        19 => Ok(Nationality::Cypriot),
        20 => Ok(Nationality::Czech),
        21 => Ok(Nationality::Danish),
        22 => Ok(Nationality::Dutch),
        23 => Ok(Nationality::Ecuadorian),
        24 => Ok(Nationality::English),
        25 => Ok(Nationality::Emirian),
        26 => Ok(Nationality::Estonian),
        27 => Ok(Nationality::Finnish),
        28 => Ok(Nationality::French),
        29 => Ok(Nationality::German),
        30 => Ok(Nationality::Ghanaian),
        31 => Ok(Nationality::Greek),
        32 => Ok(Nationality::Guatemalan),
        33 => Ok(Nationality::Honduran),
        34 => Ok(Nationality::HongKonger),
        35 => Ok(Nationality::Hungarian),
        36 => Ok(Nationality::Icelander),
        37 => Ok(Nationality::Indian),
        38 => Ok(Nationality::Indonesian),
        39 => Ok(Nationality::Irish),
        40 => Ok(Nationality::Israeli),
        41 => Ok(Nationality::Italian),
        42 => Ok(Nationality::Jamaican),
        43 => Ok(Nationality::Japanese),
        44 => Ok(Nationality::Jordanian),
        45 => Ok(Nationality::Kuwaiti),
        46 => Ok(Nationality::Latvian),
        47 => Ok(Nationality::Lebanese),
        48 => Ok(Nationality::Lithuanian),
        49 => Ok(Nationality::Luxembourger),
        50 => Ok(Nationality::Malaysian),
        51 => Ok(Nationality::Maltese),
        52 => Ok(Nationality::Mexican),
        53 => Ok(Nationality::Monegasque),
        54 => Ok(Nationality::NewZealander),
        55 => Ok(Nationality::Nicaraguan),
        56 => Ok(Nationality::NorthernIrish),
        57 => Ok(Nationality::Norwegian),
        58 => Ok(Nationality::Omani),
        59 => Ok(Nationality::Pakistani),
        60 => Ok(Nationality::Panamanian),
        61 => Ok(Nationality::Paraguayan),
        62 => Ok(Nationality::Peruvian),
        63 => Ok(Nationality::Polish),
        64 => Ok(Nationality::Portuguese),
        65 => Ok(Nationality::Qatari),
        66 => Ok(Nationality::Romanian),
        67 => Ok(Nationality::Russian),
        68 => Ok(Nationality::Salvadoran),
        69 => Ok(Nationality::Saudi),
        70 => Ok(Nationality::Scottish),
        71 => Ok(Nationality::Serbian),
        72 => Ok(Nationality::Singaporean),
        73 => Ok(Nationality::Slovakian),
        74 => Ok(Nationality::Slovenian),
        75 => Ok(Nationality::SouthKorean),
        76 => Ok(Nationality::SouthAfrican),
        77 => Ok(Nationality::Spanish),
        78 => Ok(Nationality::Swedish),
        79 => Ok(Nationality::Swiss),
        80 => Ok(Nationality::Thai),
        81 => Ok(Nationality::Turkish),
        82 => Ok(Nationality::Uruguayan),
        83 => Ok(Nationality::Ukrainian),
        84 => Ok(Nationality::Venezuelan),
        85 => Ok(Nationality::Barbadian),
        86 => Ok(Nationality::Welsh),
        87 => Ok(Nationality::Vietnamese),
        0 | 255 => Ok(Nationality::Invalid),
        _ => Err(UnpackError(format!("Invalid Nationality value: {}", value))),
    }
}

pub(crate) fn unpack_team(value: u8) -> Result<Team, UnpackError> {
    match value {
        0 => Ok(Team::Mercedes),
        1 => Ok(Team::Ferrari),
        2 => Ok(Team::RedBullRacing),
        3 => Ok(Team::Williams),
        4 => Ok(Team::AstonMartin),
        5 => Ok(Team::Alpine),
        6 => Ok(Team::AlphaTauri),
        7 => Ok(Team::Haas),
        8 => Ok(Team::McLaren),
        9 => Ok(Team::AlfaRomeo),
        85 => Ok(Team::Mercedes2020),
        86 => Ok(Team::Ferrari2020),
        87 => Ok(Team::RedBull2020),
        88 => Ok(Team::Williams2020),
        89 => Ok(Team::RacingPoint2020),
        90 => Ok(Team::Renault2020),
        91 => Ok(Team::AlphaTauri2020),
        92 => Ok(Team::Haas2020),
        93 => Ok(Team::McLaren2020),
        94 => Ok(Team::AlfaRomeo2020),
        95 => Ok(Team::AstonMartinDB11V12),
        96 => Ok(Team::AstonMartinVantageF1Edition),
        97 => Ok(Team::AstonMartinVantageSafetyCar),
        98 => Ok(Team::FerrariF8Tributo),
        99 => Ok(Team::FerrariRoma),
        100 => Ok(Team::McLaren720S),
        101 => Ok(Team::McLarenArtura),
        102 => Ok(Team::MercedesAMGGTBlackSeriesSafetyCar),
        103 => Ok(Team::MercedesAMGGTRPro),
        104 => Ok(Team::F1CustomTeam),
        106 => Ok(Team::Prema2021),
        107 => Ok(Team::UniVirtuosi2021),
        108 => Ok(Team::Carlin2021),
        109 => Ok(Team::Hitech2021),
        110 => Ok(Team::ArtGP2021),
        111 => Ok(Team::MPMotorsport2021),
        112 => Ok(Team::Charouz2021),
        113 => Ok(Team::Dams2021),
        114 => Ok(Team::Campos2021),
        115 => Ok(Team::BWT2021),
        116 => Ok(Team::Trident2021),
        117 => Ok(Team::MercedesAMGGTBlackSeries),
        255 => Ok(Team::MyTeam),
        _ => Err(UnpackError(format!("Invalid Team value: {}", value))),
    }
}

pub(crate) fn unpack_result_status(value: u8) -> Result<ResultStatus, UnpackError> {
    match value {
        0 => Ok(ResultStatus::Invalid),
        1 => Ok(ResultStatus::Inactive),
        2 => Ok(ResultStatus::Active),
        3 => Ok(ResultStatus::Finished),
        4 => Ok(ResultStatus::DidNotFinish),
        5 => Ok(ResultStatus::Disqualified),
        6 => Ok(ResultStatus::NotClassified),
        7 => Ok(ResultStatus::Retired),
        _ => Err(UnpackError(format!(
            "Invalid ResultStatus value: {}",
            value
        ))),
    }
}

pub(crate) fn unpack_tyre_compound(value: u8) -> Result<TyreCompound, UnpackError> {
    match value {
        16 => Ok(TyreCompound::C5),
        17 => Ok(TyreCompound::C4),
        18 => Ok(TyreCompound::C3),
        19 => Ok(TyreCompound::C2),
        20 => Ok(TyreCompound::C1),
        21 => Ok(TyreCompound::C0),
        7 => Ok(TyreCompound::Inter),
        8 => Ok(TyreCompound::Wet),
        9 => Ok(TyreCompound::ClassicDry),
        10 => Ok(TyreCompound::ClassicWet),
        11 => Ok(TyreCompound::F2SuperSoft),
        12 => Ok(TyreCompound::F2Soft),
        13 => Ok(TyreCompound::F2Medium),
        14 => Ok(TyreCompound::F2Hard),
        15 => Ok(TyreCompound::F2Wet),
        0 | 255 => Ok(TyreCompound::Invalid),
        _ => Err(UnpackError(format!(
            "Invalid TyreCompound value: {}",
            value
        ))),
    }
}

pub(crate) fn unpack_tyre_compound_visual(value: u8) -> Result<TyreCompoundVisual, UnpackError> {
    match value {
        16 => Ok(TyreCompoundVisual::Soft),
        17 => Ok(TyreCompoundVisual::Medium),
        18 => Ok(TyreCompoundVisual::Hard),
        7 => Ok(TyreCompoundVisual::Inter),
        8 => Ok(TyreCompoundVisual::Wet),
        9 => Ok(TyreCompoundVisual::ClassicDry),
        10 => Ok(TyreCompoundVisual::ClassicWet),
        15 => Ok(TyreCompoundVisual::F2Wet),
        19 => Ok(TyreCompoundVisual::F2SuperSoft),
        20 => Ok(TyreCompoundVisual::F2Soft),
        21 => Ok(TyreCompoundVisual::F2Medium),
        22 => Ok(TyreCompoundVisual::F2Hard),
        0 => Ok(TyreCompoundVisual::Invalid),
        _ => Err(UnpackError(format!(
            "Invalid TyreCompoundVisual value: {}",
            value
        ))),
    }
}
